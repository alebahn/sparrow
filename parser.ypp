%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <string>
  #include <map>
  #include <iostream>

  #include "node.h"

  std::map<std::string,void*> symbolTable;

  program* root;

  extern int yylex();
  void endProgram();
  void yyerror(std::string errmsg);
%}
%define parse.error verbose
%define parse.lac full
%union {
  float fval;
  int ival;
  std::string *sval;
  list *lval;
  def *dval;
  class_def *cval;
  statement *stval;
  expression *eval;
  func_call *fcval;
  import *imval;
  assign *aval;
}
%token <sval> NAME
%token <ival> NUMBER
%token <fval> FNUMBER
%token <sval> STRING
%token NEW
%token NEWLINE
%token CLASS
%token DEF
%token IF
%token FOR
%token WHILE
%token IMPORT

/*%type <lval> program;*/
%type <dval> def_stmnt;
%type <lval> imports;
%type <imval> import;
%type <lval> class_stmnts;
%type <cval> class_stmnt;
%type <lval> class_block
%type <lval> class_body
%type <lval> parameters;
%type <lval> names;
%type <lval> block;
%type <lval> body;
%type <lval> lines;
%type <lval> line;
%type <lval> args;
%type <lval> exprs;
%type <eval> term;
%type <stval> stmnt;
%type <eval> expr2;
%type <fcval> func_call;
%type <eval> expr;
%type <aval> assignment;

%%
program:  imports class_stmnts { root = new program($1,$2); }
       ;

imports:  /* NOTHING */   { $$ = new list(); }
       |  import imports  { $$ = new list($1,$2); }
       ;

import: IMPORT NAME NEWLINE { $$ = new import(*$2); }
      ;

class_stmnts: class_stmnt               { $$ = new list($1); }
            | class_stmnt class_stmnts  { $$ = new list($1, $2); }
            ;

class_stmnt: CLASS NAME class_block NEWLINE { $$ = new class_def(*$2,$3); }
           ;

class_block: '{' NEWLINE class_body '}' { $$ = $3; }
           ;

class_body: def_stmnt             { $$ = new list($1); }
          | def_stmnt class_body  { $$ = new list($1,$2); }
          ;

def_stmnt: DEF NAME '(' parameters ')' block NEWLINE  { $$ = new def(*$2,$4,$6); }
/*         | DEF NEW '(' parameters ')' block NEWLINE   { $$ = new def(*$2,$4,$6); }*/
         ;

parameters: /* NOTHING */ { $$ = new list(); }
          | names         { $$ = $1; }
          ;

names:  NAME            { $$ = new list(new name(*$1)); }
     |  NAME ',' names  { $$ = new list(new name(*$1),$3); }
     ;

block:  '{' body '}'  { $$ = $2; }
     ;

body: /* NOTHING */ { $$ = new list(); }
    | lines         { $$ = $1; }
    | line          { $$ = $1; }
    ;

lines:  NEWLINE line NEWLINE { $$ = $2; }
     |  NEWLINE line lines   { $$ = new list($2,$3); }
     ;

line: stmnt           { $$ = new list($1); }
    | stmnt ';'       { $$ = new list($1); }
    | stmnt ';' line  { $$ = new list($1,$3); }
    ;

stmnt:  if_stmnt    { $$ = NULL; }
     |  for_stmnt   { $$ = NULL; }
     |  while_stmnt { $$ = NULL; }
     |  expr        { $$ = $1; }
     ;

if_stmnt: IF
        ;

for_stmnt: FOR
         ;

while_stmnt: WHILE
           ;

expr: NAME  { $$ = new name(*$1); }
    | expr2 { $$ = $1; }
    | assignment { $$ = $1; }
    ;

expr2: func_call  { $$ = $1; }
     | term       { $$ = $1; }
     ;

func_call:  NAME '.' NAME '(' args ')'  { $$ = new func_call(new name(*$1), *$3, $5); }
         |  NAME '.' NEW '(' args ')'   { $$ = new func_call(new name(*$1), "new", $5); }
         |  expr2 '.' NAME '(' args ')' { $$ = new func_call($1, *$3, $5); }
         ;

args: /* NOTHING */ { $$ = new list(); }
    | exprs         { $$ = $1; }
    ;

exprs: expr           { $$ = new list($1); }
     | expr ',' exprs { $$ = new list($1,$3); }
     ;

assignment: NAME '=' expr { $$ = new assign(*$1,$3); }
          ;

term: STRING        { $$ = new string_term(*$1); }
    | '(' expr ')'  { $$ = $2; }
    ;

%%
void yyerror(std::string errmsg)
{
  std::cerr << errmsg << std::endl;
}
