%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <string>
  #include <map>
  #include <iostream>

  std::map<std::string,void*> symbolTable;

  extern int yylex();
  void endProgram();
  float total=0;
  void yyerror(std::string errmsg);
%}
%union {
  float fval;
  int ival;
  std::string *sval;
  void* pval;
}
%token <sval> NAME
%token <ival> NUMBER
%token <fval> FNUMBER
%token <sval> STRING
%token NEWLINE
%token CLASS
%token DEF
%token IF
%token FOR
%token WHILE

//%type <pval> args;
%%
program:  class_stmnt | def_stmnt                 { std::cout << "program" << std::endl; }
       ;

class_stmnt: CLASS
           ;

def_stmnt: DEF NAME '(' parameters ')' block NEWLINE
         ;

parameters: /* NOTHING */
          | names
          ;

names:  NAME
     |  NAME ',' names
     ;

block:  '{' body '}'
     ;

body: lines { std::cout << "body1" << std::endl; }
    | line  { std::cout << "body2" << std::endl; }
    ;

lines:  NEWLINE line NEWLINE {std::cout << "lines1" << std::endl; }
     |  NEWLINE line lines   {std::cout << "lines2" << std::endl; }
     ;

line: stmnt           { std::cout << "line1" << std::endl; }
    | stmnt ';'       { std::cout << "line2" << std::endl; }
    | stmnt ';' line  { std::cout << "line3" << std::endl; }
    ;

stmnt:  if_stmnt | for_stmnt | while_stmnt | expr { std::cout << "statment" << std::endl; }
     ;

if_stmnt: IF
        ;

for_stmnt: FOR
         ;

while_stmnt: WHILE
           ;

expr: func_call
    | NAME
    | term
    ;

func_call:  expr '(' args ')' { std::cout << "func call" << std::endl; }
         ;

args: /* NOTHING */
    | exprs
    ;

exprs:  expr
     |  expr ',' exprs
     ;

term: STRING  { std::cout << "string: " << *$1 << std::endl; }
    ;

%%
void endProgram()
{
        std::cout << "Your total is " << total << ", Goodbye" << std::endl;
        exit(0);
}

void yyerror(std::string errmsg)
{
    std::cerr << errmsg << std::endl;
}

void updateTotal(float value)
{
        total+=value;
}
