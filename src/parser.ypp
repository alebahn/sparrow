%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <string>
  #include <map>
  #include <iostream>

  #include "node.h"

  std::map<std::string,void*> symbolTable;

  program* root;

  extern int yylex();
  extern int yylineno;
  void endProgram();
  void yyerror(std::string errmsg);
%}
%define parse.error verbose
%define parse.lac full
%union {
  double fval;
  int ival;
  std::string *sval;
  list *lval;
  def *dval;
  class_def *cval;
  statement *stval;
  expression *eval;
  func_call *fcval;
  import *imval;
  assign *aval;
  static_assign *saval;
  name *nval;
  const_expr *ceval;
  if_stmnt *ifval;
}
%token <sval> NAME
%token <sval> STRING
%token <ival> NUMBER
%token <fval> FNUMBER
%token THIS
%token TRUE
%token FALSE
%token NEW
%token NEWLINE
%token CLASS
%token DEF
%token IF
%token ELSE
%token ELSEIF
%token FOR
%token WHILE
%token IMPORT
%token LE
%token GE
%token NE
%token EQ

/*%type <lval> program;*/
%type <dval> def_stmnt;
%type <ifval> if_stmnt;
%type <lval> else_stmnt;
%type <lval> imports;
%type <imval> import;
%type <lval> class_stmnts;
%type <cval> class_stmnt;
%type <lval> static_assigns;
%type <saval> static_assign;
%type <ceval> const_expr;
%type <lval> class_body
%type <lval> parameters;
%type <lval> names;
%type <lval> block;
%type <lval> body;
%type <lval> lines;
%type <lval> line;
%type <lval> args;
%type <lval> exprs;
%type <eval> term;
%type <ceval> literal;
%type <stval> stmnt;
%type <eval> expr2;
%type <eval> expr3;
%type <fcval> func_call;
%type <eval> expr;
%type <aval> assignment;
%type <fcval> comparison
%type <nval> identifier;

%%
program:  imports class_stmnts { root = new program($1,$2);  root->setLoc(@$);}
       ;

eol: NEWLINE      { }
   | NEWLINE eol  { }
   ;

imports:  /* NOTHING */   { $$ = new list(); $$->setLoc(@$); }
       |  import imports  { $$ = new list($1,$2); $$->setLoc(@$); }
       ;

import: IMPORT NAME eol { $$ = new import(*$2); $$->setLoc(@$); }
      ;

class_stmnts: class_stmnt               { $$ = new list($1); $$->setLoc(@$); }
            | class_stmnt class_stmnts  { $$ = new list($1, $2); $$->setLoc(@$); }
            ;

class_stmnt: CLASS NAME '{' eol static_assigns class_body '}' eol { $$ = new class_def(*$2,$5,$6); $$->setLoc(@$); }
           ;

static_assigns: /* NOTHING */                 { $$ = new list(); $$->setLoc(@$); }
              | static_assign static_assigns  { $$ = new list($1,$2); $$->setLoc(@$); }
              ;

static_assign: NAME '=' const_expr eol  { $$ = new static_assign(*$1, $3); $$->setLoc(@$);}
             ;

const_expr: NAME    { $$ = new name(*$1); $$->setLoc(@$); }
          | literal { $$ = $1; }

class_body: def_stmnt             { $$ = new list($1); $$->setLoc(@$); }
          | def_stmnt class_body  { $$ = new list($1,$2); $$->setLoc(@$); }
          ;

def_stmnt: DEF NAME '(' parameters ')' block eol  { $$ = new def(*$2,$4,$6); $$->setLoc(@$); }
         ;

parameters: /* NOTHING */ { $$ = new list(); $$->setLoc(@$); }
          | names         { $$ = $1; }
          ;

names:  NAME            { $$ = new list(new name(*$1)); $$->setLoc(@$); }
     |  NAME ',' names  { $$ = new list(new name(*$1),$3); $$->setLoc(@$); }
     ;

block:  '{' body '}'  { $$ = $2; }
     ;

body: /* NOTHING */ { $$ = new list(); $$->setLoc(@$); }
    | lines         { $$ = $1; }
    | line          { $$ = $1; }
    ;

lines:  eol line eol { $$ = $2; }
     |  eol line lines   { $$ = new list($2,$3); $$->setLoc(@$); }
     ;

line: stmnt           { $$ = new list($1); $$->setLoc(@$); }
    | stmnt ';'       { $$ = new list($1); $$->setLoc(@$); }
    | stmnt ';' line  { $$ = new list($1,$3); $$->setLoc(@$); }
    ;

stmnt:  if_stmnt    { $$ = $1; }
     |  for_stmnt   { $$ = NULL; }
     |  while_stmnt { $$ = NULL; }
     |  expr        { $$ = $1; }
     ;

if_stmnt: IF '(' expr ')' block             { $$ = new if_stmnt($3,$5); $$->setLoc(@$); }
        | IF '(' expr ')' block else_stmnt  { $$ = new if_stmnt($3,$5,$6); $$->setLoc(@$); }
        ;

else_stmnt: ELSE block  { $$ = $2; }
          | ELSEIF '(' expr ')' block             { $$ = new list(new if_stmnt($3,$5)); $$->setLoc(@$); }
          | ELSEIF '(' expr ')' block else_stmnt  { $$ = new list(new if_stmnt($3,$5,$6)); $$->setLoc(@$); }
          ;

for_stmnt: FOR
         ;

while_stmnt: WHILE
           ;

expr: expr2       { $$ = $1; }
    | assignment  { $$ = $1; }
    ;

expr2: expr3      { $$ = $1; }
     | comparison { $$ = $1; }
     ;

expr3: term       { $$ = $1; }
     | identifier { $$ = $1; }
     | THIS       { $$ = new this_term(); $$->setLoc(@$); }
     | '!' expr3  { $$ = new func_call($2, "not", new list()); $$->setLoc(@$); }
     ;

func_call:  NAME '.' NAME '(' args ')'          { $$ = new func_call(new name(*$1), *$3, $5); $$->setLoc(@$); }
         |  NAME '.' NEW '(' args ')'           { $$ = new func_call(new name(*$1), "new", $5); $$->setLoc(@$); }
         |  '.' NAME '.' NAME '(' args ')'      { $$ = new func_call(new name(*$2), *$4, $6); $$->setLoc(@$); }
         |  THIS '.' NAME '.' NAME '(' args ')' { $$ = new func_call(new name(*$3), *$5, $7); $$->setLoc(@$); }
         |  THIS '.' NAME '(' args ')'          { $$ = new func_call(new this_term(), *$3, $5); $$->setLoc(@$); }
         |  term '.' NAME '(' args ')'          { $$ = new func_call($1, *$3, $5); $$->setLoc(@$); }
         ;

args: /* NOTHING */ { $$ = new list(); $$->setLoc(@$); }
    | exprs         { $$ = $1; }
    ;

exprs: expr           { $$ = new list($1); $$->setLoc(@$); }
     | expr ',' exprs { $$ = new list($1,$3); $$->setLoc(@$); }
     ;

assignment: identifier '=' expr { $$ = new assign($1,$3); $$->setLoc(@$); }
          ;

comparison: expr2 '<' expr3 { $$ = new func_call($1, "lessThan", new list($3)); $$->setLoc(@$); }
          | expr2 LE expr3  { $$ = new func_call($1, "lessEqual", new list($3)); $$->setLoc(@$); }
          | expr2 '>' expr3 { $$ = new func_call($1, "greaterThan", new list($3)); $$->setLoc(@$); }
          | expr2 GE expr3  { $$ = new func_call($1, "greaterEqual", new list($3)); $$->setLoc(@$); }
          | expr2 NE expr3  { $$ = new func_call($1, "notEqual", new list($3)); $$->setLoc(@$); }
          | expr2 EQ expr3  { $$ = new func_call($1, "equalTo", new list($3)); $$->setLoc(@$); }
          ;

term: func_call     { $$ = $1; @$.first_line=2; }
    | literal       { $$ = $1; }
    | '(' expr ')'  { $$ = $2; }
    ;

literal: STRING   { $$ = new string_term(*$1); $$->setLoc(@$); }
       | NUMBER   { $$ = new int_term($1); $$->setLoc(@$); }
       | FNUMBER  { $$ = new float_term($1); $$->setLoc(@$); }
       | TRUE     { $$ = new bool_term(true); $$->setLoc(@$); }
       | FALSE    { $$ = new bool_term(false); $$->setLoc(@$); }
       ;

identifier: NAME          { $$ = new name(*$1); $$->setLoc(@$); }
          | '.' NAME      { $$ = new name(*$2, true); $$->setLoc(@$); }
          | THIS '.' NAME { $$ = new name(*$3, true); $$->setLoc(@$); }
          ;

%%
void yyerror(std::string errmsg)
{
  std::cerr << "line " << yylloc.first_line << " character " << yylloc.first_column <<": " << errmsg << std::endl;
  exit(1);
}
